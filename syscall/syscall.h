#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdint.h>

#define OK_VAL 0

typedef struct MemoryFlags {
  uintptr_t bits;
} MemoryFlags;
#define MemoryFlags_READ (MemoryFlags){ .bits = (uintptr_t)1 }
#define MemoryFlags_WRITE (MemoryFlags){ .bits = (uintptr_t)(1 << 1) }
#define MemoryFlags_EXECUTE (MemoryFlags){ .bits = (uintptr_t)(1 << 2) }
#define MemoryFlags_ANONYMOUS (MemoryFlags){ .bits = (uintptr_t)(1 << 3) }
#define MemoryFlags_DEFAULT (MemoryFlags){ .bits = (uintptr_t)(((MemoryFlags_READ).bits | (MemoryFlags_WRITE).bits) | (MemoryFlags_ANONYMOUS).bits) }

intptr_t exit(uintptr_t status);

intptr_t k_log(const uint8_t *ptr, uintptr_t len);

intptr_t sleep(uintptr_t seconds);

intptr_t yield_(void);

intptr_t mmap(const uint8_t *ptr, uintptr_t pages, uintptr_t flags, uintptr_t fd);

intptr_t munmap(const uint8_t *ptr, uintptr_t pages);

intptr_t mprotect(const uint8_t *ptr, uintptr_t pages, uintptr_t prot);

intptr_t open(const char *path);

intptr_t close(uintptr_t fd);

intptr_t read(uintptr_t fd, uint8_t *buffer, uintptr_t len);

intptr_t write(uintptr_t fd, const uint8_t *buffer, uintptr_t len);

struct MemoryFlags mflags_empty(void);
